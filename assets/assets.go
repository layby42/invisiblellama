// Code generated by go-bindata.
// sources:
// assets/resources/favicon.ico
// assets/resources/images/default/token0.png
// assets/resources/images/default/token1.png
// assets/resources/images/default/token2.png
// assets/resources/images/default/token3.png
// assets/resources/images/default/token4.png
// assets/resources/images/default/token5.png
// assets/resources/images/default/token6.png
// assets/resources/images/empty.png
// assets/resources/images/icon-lines.png
// assets/resources/images/icon.png
// assets/resources/images/il-logo-80.png
// assets/resources/images/il-logo.png
// assets/resources/main.css
// assets/resources/main.js
// assets/templates/_head.tmpl
// assets/templates/_lines.tmpl
// assets/templates/index.tmpl
// DO NOT EDIT!

package assets

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// assetsResourcesFaviconIco reads file data from disk. It returns an error on failure.
func assetsResourcesFaviconIco() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/favicon.ico"
	name := "assets/resources/favicon.ico"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesDefaultToken0Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesDefaultToken0Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/default/token0.png"
	name := "assets/resources/images/default/token0.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesDefaultToken1Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesDefaultToken1Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/default/token1.png"
	name := "assets/resources/images/default/token1.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesDefaultToken2Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesDefaultToken2Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/default/token2.png"
	name := "assets/resources/images/default/token2.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesDefaultToken3Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesDefaultToken3Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/default/token3.png"
	name := "assets/resources/images/default/token3.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesDefaultToken4Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesDefaultToken4Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/default/token4.png"
	name := "assets/resources/images/default/token4.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesDefaultToken5Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesDefaultToken5Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/default/token5.png"
	name := "assets/resources/images/default/token5.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesDefaultToken6Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesDefaultToken6Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/default/token6.png"
	name := "assets/resources/images/default/token6.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesEmptyPng reads file data from disk. It returns an error on failure.
func assetsResourcesImagesEmptyPng() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/empty.png"
	name := "assets/resources/images/empty.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesIconLinesPng reads file data from disk. It returns an error on failure.
func assetsResourcesImagesIconLinesPng() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/icon-lines.png"
	name := "assets/resources/images/icon-lines.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesIconPng reads file data from disk. It returns an error on failure.
func assetsResourcesImagesIconPng() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/icon.png"
	name := "assets/resources/images/icon.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesIlLogo80Png reads file data from disk. It returns an error on failure.
func assetsResourcesImagesIlLogo80Png() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/il-logo-80.png"
	name := "assets/resources/images/il-logo-80.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesImagesIlLogoPng reads file data from disk. It returns an error on failure.
func assetsResourcesImagesIlLogoPng() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/images/il-logo.png"
	name := "assets/resources/images/il-logo.png"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesMainCss reads file data from disk. It returns an error on failure.
func assetsResourcesMainCss() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/main.css"
	name := "assets/resources/main.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsResourcesMainJs reads file data from disk. It returns an error on failure.
func assetsResourcesMainJs() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/resources/main.js"
	name := "assets/resources/main.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplates_headTmpl reads file data from disk. It returns an error on failure.
func assetsTemplates_headTmpl() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/templates/_head.tmpl"
	name := "assets/templates/_head.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplates_linesTmpl reads file data from disk. It returns an error on failure.
func assetsTemplates_linesTmpl() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/templates/_lines.tmpl"
	name := "assets/templates/_lines.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesIndexTmpl reads file data from disk. It returns an error on failure.
func assetsTemplatesIndexTmpl() (*asset, error) {
	path := "/home/og/Go/src/github.com/layby42/invisiblellama/assets/templates/index.tmpl"
	name := "assets/templates/index.tmpl"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/resources/favicon.ico": assetsResourcesFaviconIco,
	"assets/resources/images/default/token0.png": assetsResourcesImagesDefaultToken0Png,
	"assets/resources/images/default/token1.png": assetsResourcesImagesDefaultToken1Png,
	"assets/resources/images/default/token2.png": assetsResourcesImagesDefaultToken2Png,
	"assets/resources/images/default/token3.png": assetsResourcesImagesDefaultToken3Png,
	"assets/resources/images/default/token4.png": assetsResourcesImagesDefaultToken4Png,
	"assets/resources/images/default/token5.png": assetsResourcesImagesDefaultToken5Png,
	"assets/resources/images/default/token6.png": assetsResourcesImagesDefaultToken6Png,
	"assets/resources/images/empty.png": assetsResourcesImagesEmptyPng,
	"assets/resources/images/icon-lines.png": assetsResourcesImagesIconLinesPng,
	"assets/resources/images/icon.png": assetsResourcesImagesIconPng,
	"assets/resources/images/il-logo-80.png": assetsResourcesImagesIlLogo80Png,
	"assets/resources/images/il-logo.png": assetsResourcesImagesIlLogoPng,
	"assets/resources/main.css": assetsResourcesMainCss,
	"assets/resources/main.js": assetsResourcesMainJs,
	"assets/templates/_head.tmpl": assetsTemplates_headTmpl,
	"assets/templates/_lines.tmpl": assetsTemplates_linesTmpl,
	"assets/templates/index.tmpl": assetsTemplatesIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"resources": &bintree{nil, map[string]*bintree{
			"favicon.ico": &bintree{assetsResourcesFaviconIco, map[string]*bintree{}},
			"images": &bintree{nil, map[string]*bintree{
				"default": &bintree{nil, map[string]*bintree{
					"token0.png": &bintree{assetsResourcesImagesDefaultToken0Png, map[string]*bintree{}},
					"token1.png": &bintree{assetsResourcesImagesDefaultToken1Png, map[string]*bintree{}},
					"token2.png": &bintree{assetsResourcesImagesDefaultToken2Png, map[string]*bintree{}},
					"token3.png": &bintree{assetsResourcesImagesDefaultToken3Png, map[string]*bintree{}},
					"token4.png": &bintree{assetsResourcesImagesDefaultToken4Png, map[string]*bintree{}},
					"token5.png": &bintree{assetsResourcesImagesDefaultToken5Png, map[string]*bintree{}},
					"token6.png": &bintree{assetsResourcesImagesDefaultToken6Png, map[string]*bintree{}},
				}},
				"empty.png": &bintree{assetsResourcesImagesEmptyPng, map[string]*bintree{}},
				"icon-lines.png": &bintree{assetsResourcesImagesIconLinesPng, map[string]*bintree{}},
				"icon.png": &bintree{assetsResourcesImagesIconPng, map[string]*bintree{}},
				"il-logo-80.png": &bintree{assetsResourcesImagesIlLogo80Png, map[string]*bintree{}},
				"il-logo.png": &bintree{assetsResourcesImagesIlLogoPng, map[string]*bintree{}},
			}},
			"main.css": &bintree{assetsResourcesMainCss, map[string]*bintree{}},
			"main.js": &bintree{assetsResourcesMainJs, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"_head.tmpl": &bintree{assetsTemplates_headTmpl, map[string]*bintree{}},
			"_lines.tmpl": &bintree{assetsTemplates_linesTmpl, map[string]*bintree{}},
			"index.tmpl": &bintree{assetsTemplatesIndexTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

